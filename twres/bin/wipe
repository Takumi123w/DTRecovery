#!/bin/bash
terminal_height=$(stty size | cut -d ' ' -f 1)
readonly VIEW_HEIGHT=$((terminal_height - 6))

stty_orig="$(stty -g)"
trap 'stty "$stty_orig"; printf "\033c"' EXIT INT TERM

check_fbe_support() {
    grep -q "fileencryption=" "/vendor/etc/fstab.mt6739" 2>/dev/null
    return $?
}

execute_format() {
    local target_block="$1"
    local fs_type="$2"
    local f2fs_options=""
     
    twrp umount data
    umount -l "$target_block" 2>/dev/null
    sleep 2
    umount -l "$target_block" 2>/dev/null

    printf "\033c"
    printf "EXEC FORMAT\n"
    printf "Target: %s\n" "$target_block"
    printf "Filesystem: %s %s\n" "$fs_type" "$f2fs_options"
    printf "------------------------\n"

case "$fs_type" in
    ext4)
        mke2fs -t ext4 -F "$target_block"
        ;;
    f2fs)
		twrp unmount /vendor
		sleep 2
		twrp mount vendor
		printf "CHECKING...\n"
		if grep -q "encryption" /vendor/etc/fstab.* && grep -q "data" /vendor/etc/fstab.*; then
		printf "Encryption found in Fstab"
		make_f2fs -f -O encrypt "$target_block"
		else
		printf "No encryption"
		make_f2fs -f "$target_block"
		fi
        fsck.f2fs "$target_block"
        sleep 2
        twrp unmount vendor
        ;;
    vfat)
        mkfs.fat -F 32 "$target_block"
        ;;
    ntfs)
        mkfs.ntfs -f "$target_block"
        ;;
        *)
            printf "ERROR: Unknown filesystem type: %s\n" "$fs_type"
            printf "\nFORMAT FAILED\n"
            stty "$stty_orig"
            read -n 1 wait_key
            stty -echo -icanon
            return 1
            ;;
    esac
    
	twrp mount data
    printf "\nFORMAT COMPLETE\n"
    printf "Press any key to return to the menu...\n"
    
    read -n 1 wait_key
}

format_fs_menu() {
    local target_block="$1"
    local _selected_index=0
    
    local _fs_options=(
		"Cancel format" "back"
        "Format as ext4" "ext4"
        "Format as f2fs" "f2fs"
        "Format as vfat" "vfat"
        "Format as ntfs" "ntfs"
    )

    local option_count=$(( ${#_fs_options[@]} / 2 ))

    while true; do
        printf "\033c"
        printf "SELECT FILESYSTEM\n"
        printf "Partition: %s\n" "$target_block"
        printf "WARNING: This will ERASE all data on the partition!\n"
        
        printf "=================================================\n"

        for ((i=0; i < option_count; i++)); do
            local display_name="${_fs_options[i*2]}"
            if [[ "$i" -eq "$_selected_index" ]]; then
                printf "> %s\n" "$display_name"
            else
                printf "  %s\n" "$display_name"
            fi
        done
        
        local lines_printed="$option_count"
        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "=================================================\n"
        printf "[vol+] Up | [vol-] Down | [power] FORMAT | [power+vol-] Back\n"

        stty -echo -icanon
        read -n 1 menu_key
        stty "$stty_orig"

        case "$menu_key" in
            j)
                if [ "$_selected_index" -lt "$((option_count - 1))" ]; then
                    _selected_index=$((_selected_index + 1))
                fi
                ;;
            k)
                if [ "$_selected_index" -gt 0 ]; then
                    _selected_index=$((_selected_index - 1))
                fi
                ;;
            l | $'\r' | $'\n')
                local fs_id="${_fs_options[_selected_index*2 + 1]}"
                if [[ "$fs_id" == "back" ]]; then
                return 0
                fi
                stty -echo -icanon
                execute_format "$target_block" "$fs_id"
                return 0
                ;;
            q)
                exit
                ;;
        esac
    done
}

handle_format_menu() {
    
    local _selected_index=0
    local _available_targets=()
    local target_count=0

    while IFS= read -r target; do
        if [[ -e "$target" ]]; then
            _available_targets+=("$target")
        fi
    done <<< $(awk '{print $3,$4}' /etc/twrp.flags | grep /dev | grep -E 'wipe|flash' | sed 's/#//g' | sed '/^$/d' | awk '{print $1}')

    target_count="${#_available_targets[@]}"

    local _menu_options=("Back to main menu" "${_available_targets[@]}")
    local total_count="${#_menu_options[@]}"
    
    if [ "$target_count" -eq 0 ]; then
        printf "\033c"
        printf "NO FORMAT TARGETS FOUND\n"
        printf "No existing, formattable partitions were found.\n"
        printf "\nPress any key to return to Main Menu...\n"
        stty -echo -icanon
        read -n 1 wait_key
        stty "$stty_orig"
        return 0
    fi

    while true; do
        printf "\033c"
        printf "_FORMAT PARTITION MENU\n"
        printf "=========================================================\n"
        printf "Select partition to format:\n"

        for i in "${!_menu_options[@]}"; do
            target="${_menu_options[i]}"
            if [[ "$i" -eq "$_selected_index" ]]; then
                printf "> %s\n" "$target"
            else
                printf "  %s\n" "$target"
            fi
        done
        
        local lines_printed="${#_menu_options[@]}"
        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "=========================================================\n"
        printf "[vol+] Up | [vol-] Down | [power] SELECT | [power+vol-] Quit\n"

        stty -echo -icanon
        read -n 1 menu_key
        stty "$stty_orig"

        case "$menu_key" in
            j)
                if [ "$_selected_index" -lt "$((total_count - 1))" ]; then
                    _selected_index=$((_selected_index + 1))
                fi
                ;;
            k)
                if [ "$_selected_index" -gt 0 ]; then
                    _selected_index=$((_selected_index - 1))
                fi
                ;;
            l | $'\r' | $'\n')
                if [ "$_selected_index" -eq 0 ]; then
                    printf "\033c"
                    twrp set backmenu 1
                    exit
                fi
                local selected_target="${_available_targets[_selected_index - 1]}"
                format_fs_menu "$selected_target"
                ;;
            q)
                break
                exit
                ;;
        esac
    done
}

handle_format_menu
