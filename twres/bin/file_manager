#!/bin/bash
readonly PARTITION_CONFIG_FILE="/etc/twrp.flags"
readonly DEFAULT_START_DIRS=(
    "/sdcard"
    "/external_sd"
    "/data"
    "/usb-otg"
)

_items=()
_selected_index=0
_page_start_index=0
terminal_height=$(stty size | cut -d ' ' -f 1)
readonly VIEW_HEIGHT=$((terminal_height - 6))
stty_orig="$(stty -g)"
trap 'stty "$stty_orig"; printf "\033c"' EXIT INT TERM

flash_image_command() {
    local image_path="$1"
    local target_block="$2"

    printf "Flashing block with img (dd if=\"%s\" of=\"%s\" bs=4M)\n" "$image_path" "$target_block"
    dd if="$image_path" of="$target_block" bs=4M
}

handle_img_flash() {
  local image_path="$1"
  local _flash_selected_index=0
  local _all_possible_targets=()
  local _available_targets=()
  local target_count=0

  if [[ -f "$PARTITION_CONFIG_FILE" ]]; then
    
    while IFS= read -r target_line; do
    _all_possible_targets+=("$target_line")
    echo "Got: $target_line"
done <<< $(awk '{print $3,$4}' /etc/twrp.flags | grep /dev | grep -E 'flashimg|recovery|name/boot' | sed 's/#//g' | sed '/^$/d' | awk '{print $1}')

  else
    printf "\033c"
    printf " ERROR \n"
    printf "Partition config file not found: %s\n" "$PARTITION_CONFIG_FILE"
    printf "\n Press any key to return to the file manager \n"
    stty -echo -icanon
    read -n 1 wait_key
    stty "$stty_orig"
    return 0
  fi

  for target in "${_all_possible_targets[@]}"; do
    local trimmed_target=$(echo "$target" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    if [[ -n "$trimmed_target" ]] && [[ ! "$trimmed_target" =~ ^# ]]; then
        if [[ -e "$trimmed_target" ]]; then
            _available_targets+=("$trimmed_target")
        fi
    fi
  done

  target_count="${#_available_targets[@]}"

  if [ "$target_count" -eq 0 ]; then
    printf "\033c"
    printf " NO FLASH TARGETS FOUND \n"
    printf "No existing partitions were found listed in %s.\n" "$PARTITION_CONFIG_FILE"
    printf "\n Press any key to return to the file manager \n"
    stty -echo -icanon
    read -n 1 wait_key
    stty "$stty_orig"
    return 0
  fi

  while true; do
    printf "\033c"
    printf "_FLASH IMAGE MENU \n"
    printf "Image: %s\n" "$(basename "$image_path")"

    printf "Select block to flash (Only existing blocks are shown):\n"

    for i in "${!_available_targets[@]}"; do
      target="${_available_targets[i]}"
      if [[ "$i" -eq "$_flash_selected_index" ]]; then
        printf "> \033[7m%s\033[0m\n" "$target"
      else
        printf "  %s\n" "$target"
      fi
    done

    local lines_printed="${#_available_targets[@]}"
    for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
      echo
    done

    printf "[vol+] Up | [vol-] Down | [power] Flash | [power+vol-] Quit\n"

    stty -echo -icanon
    read -n 1 flash_key
    stty "$stty_orig"

    case "$flash_key" in
      j)
        if [ "$_flash_selected_index" -lt "$((target_count - 1))" ]; then
          _flash_selected_index=$((_flash_selected_index + 1))
        fi
        ;;
      k)
        if [ "$_flash_selected_index" -gt 0 ]; then
          _flash_selected_index=$((_flash_selected_index - 1))
        fi
        ;;
      l | $'\r' | $'\n')
        local selected_target="${_available_targets[_flash_selected_index]}"

        printf "\033c"
        printf " Executing Image Flash \n"
        printf "Flashing %s to %s...\n" "$(basename "$image_path")" "$selected_target"

        flash_image_command "$image_path" "$selected_target"

        printf "\n Press any key to return to the file manager \n"

        stty -echo -icanon
        read -n 1 wait_key
        stty "$stty_orig"
        file_manager_main
        return 0
        ;;
      q)
        return 0
        ;;
    esac
  done
}

get_items() {
  _items=("..")
  _items+=("Back to main menu")

  shopt -s nullglob
  
  for item in * .[!.]* ..?*; do
    [ -e "$item" ] || [ -L "$item" ] || continue
    if [[ "$item" == "." ]] || [[ "$item" == ".." ]]; then
        continue
    fi

    if [[ -d "$item" ]]; then
      _items+=("${item}/")
    else
      _items+=("$item")
    fi
  done

  shopt -u nullglob
}

draw_ui() {
  printf "\033c"

  item_count="${#_items[@]}"

  current_page=$(( (_page_start_index / VIEW_HEIGHT) + 1 ))
  total_pages=$(( (item_count + VIEW_HEIGHT - 1) / VIEW_HEIGHT ))
  if [ "$item_count" -eq 0 ]; then total_pages=1; fi

  printf "_Flash File Manager | Location: %s | Page %s of %s\n" "$(pwd)" "$current_page" "$total_pages"


  end_index=$((_page_start_index + VIEW_HEIGHT - 1))

  for (( i = _page_start_index; i < item_count && i <= end_index; i++ )); do
    item="${_items[i]}"

    if [[ "$i" -eq "$_selected_index" ]]; then
      printf "> \033[7m%s\033[0m\n" "$item"
    else
      printf "  %s\n" "$item"
    fi
  done

  lines_printed=$((i - _page_start_index))
  for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
    echo
  done


  printf "[vol+] Up | [vol-] Down | [power] Select/Action | [power+vol-] Quit\n"
}

draw_start_menu() {
    local menu_items=()
    local dir
    for dir in "${DEFAULT_START_DIRS[@]}"; do
        if [ -d "$dir" ] && [ "$(ls -A "$dir")" ]; then
            menu_items+=("$dir (Mounted)")
        else
            menu_items+=("$dir (Unmounted)")
        fi
    done
    
    local final_menu_items=("Back to main menu")
    final_menu_items+=("${menu_items[@]}")
    menu_items=("${final_menu_items[@]}")

    local menu_count="${#menu_items[@]}"
    local current_index=$1

    printf "\033c\n"
    printf "_Flash File Manager | Select Storage \n"
    printf "================================================\n"

        for ((i=0; i < menu_count; i++)); do
            item="${menu_items[i]}"
            if [[ "$i" -eq "$current_index" ]]; then
                printf "> \033[7m%s\033[0m\n" "$item"
            else
                printf "  %s\n" "$item"
            fi
        done

    local lines_printed="${#menu_items[@]}"
    for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

    printf "[vol+] Up | [vol-] Down | [power] Select | [power+vol-] Quit\n"
}

select_start_dir() {
    local _start_selected_index=0
    
    local menu_count=$(( ${#DEFAULT_START_DIRS[@]} + 1 )) 

    while true; do
        draw_start_menu "$_start_selected_index"

        stty -echo -icanon
        read -n 1 start_key
        stty "$stty_orig"

        case "$start_key" in
            j)
                if [ "$_start_selected_index" -lt "$((menu_count - 1))" ]; then
                    _start_selected_index=$((_start_selected_index + 1))
                fi
                ;;
            k)
                if [ "$_start_selected_index" -gt 0 ]; then
                    _start_selected_index=$((_start_selected_index - 1))
                fi
                ;;
            l | $'\r' | $'\n')
                if [ "$_start_selected_index" -eq 0 ]; then
                    printf "\033c"
                    echo "Returning to main menu..."
                    twrp set backmenu 1
                    exit
                fi
                local array_index=$((_start_selected_index - 1))
                local selected_dir="${DEFAULT_START_DIRS[array_index]}"

                if [[ -d "$selected_dir" ]]; then
                    cd "$selected_dir" || exit 1
                    return 0
                else
                    printf "\033c"
                    printf "WARNING: %s not found. Starting in /\n" "$selected_dir"
                    sleep 1
                    cd / || exit 1
                    return 0
                fi
                ;;
            q)
                exit 0
                ;;
        esac
    done
}

DEST_DIR="" 

run_dir_selector() {
    local file_to_move="$1"
    local original_pwd="$(pwd)"
    local selected_path=""

    _selected_index=0
    _page_start_index=0

    while true; do
        get_items 
        
        printf "\033c"
        local item_count="${#_items[@]}"
        local current_page=$(( (_page_start_index / VIEW_HEIGHT) + 1 ))
        local total_pages=$(( (item_count + VIEW_HEIGHT - 1) / VIEW_HEIGHT ))
        if [ "$item_count" -eq 0 ]; then total_pages=1; fi

        printf "_MOVE FILE: %s | Select Destination | Location: %s | Page %s of %s\n" \
               "$file_to_move" "$(pwd)" "$current_page" "$total_pages"

        local end_index=$((_page_start_index + VIEW_HEIGHT - 1))
        for (( i = _page_start_index; i < item_count && i <= end_index; i++ )); do
            local item="${_items[i]}"
            local item_no_slash="${item%/}"

            if [[ "$i" -eq "$_selected_index" ]]; then
                printf "> \033[7m%s\033[0m\n" "$item"
            else
                printf "  %s\n" "$item"
            fi
        done

        local lines_printed=$((i - _page_start_index))
        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "[vol+] Up | [vol-] Down | [power] Select/Action | [q] Cancel Move\n"
        
        stty -echo -icanon
        read -n 1 key
        stty "$stty_orig"

        item_count="${#_items[@]}"

        case "$key" in
            j)
                if [ "$_selected_index" -lt "$((item_count - 1))" ]; then
                    _selected_index=$((_selected_index + 1))
                fi
                if [ "$_selected_index" -ge "$((_page_start_index + VIEW_HEIGHT))" ]; then
                    _page_start_index=$((_page_start_index + 1))
                fi
                ;;
            k)
                if [ "$_selected_index" -gt 0 ]; then
                    _selected_index=$((_selected_index - 1))
                fi
                if [ "$_selected_index" -lt "$_page_start_index" ]; then
                    _page_start_index=$((_page_start_index - 1))
                fi
                ;;

            l | $'\r' | $'\n')
                local selected_item_raw="${_items[_selected_index]}"
                local selected_item="${selected_item_raw%/}"
                
                if [[ "$selected_item" == "Back to main menu" ]]; then
                   twrp set backmenu 1
                    exit
                fi

                if [[ -d "$selected_item" ]]; then
                    if [[ "$selected_item" == ".." ]]; then
                        cd .. || exit 1
                        _selected_index=0
                        _page_start_index=0
                        continue
                    fi
                    _select_dir_action "$selected_item" "$original_pwd"
                    local return_code=$?

                    if [ "$return_code" -eq 1 ]; then
                        return 0
                    elif [ "$return_code" -eq 0 ]; then
                        _selected_index=0
                        _page_start_index=0
                    fi
                    
                else
                    printf "\033c"
                    printf "\nWARNING: Must select a destination folder. Cannot select a file.\n"
                    sleep 1
                fi
                ;;
            q)
                cd "$original_pwd" || exit 1
                return 1
                ;;
        esac
    done
}

_select_dir_action() {
    local selected_item="$1"
    local original_pwd="$2"
    local submenu_index=0
    local submenu_items=("Enter Folder" "Select Destination Here" "Cancel") 
    local menu_lines="${#submenu_items[@]}"
    local menu_title_lines=3

    while true; do
        printf "\033c"
        printf "_MOVE ACTION: %s\n" "$selected_item"
        printf "Choose action for directory:\n\n"

        for i in "${!submenu_items[@]}"; do
            local item="${submenu_items[i]}"
            if [[ "$i" -eq "$submenu_index" ]]; then
                printf "> \033[7m%s\033[0m\n" "$item"
            else
                printf "  %s\n" "$item"
            fi
        done
        
        local lines_printed=$((menu_title_lines + menu_lines))
        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "\n[vol+] Up | [vol-] Down | [power] Select/Action | [q] Cancel Move\n"
        
        stty -echo -icanon
        read -n 1 sub_key
        stty "$stty_orig"

        case "$sub_key" in
            k)
                if [ "$submenu_index" -gt 0 ]; then
                    submenu_index=$((submenu_index - 1))
                fi
                ;;
            j)
                if [ "$submenu_index" -lt "$(( menu_lines - 1 ))" ]; then
                    submenu_index=$((submenu_index + 1))
                fi
                ;;
            l | $'\r' | $'\n')
                case "$submenu_index" in
                    0)
                        cd "$selected_item" || exit 1
                        return 0
                        ;;
                    1)
                        local selected_path
                        selected_path="$(pwd)/$selected_item"
                        
                        cd "$original_pwd" || exit 1
                        DEST_DIR="$selected_path"
                        return 1
                        ;;
                    2 | *)
                        return 2
                        ;;
                esac
                ;;
            q)
                exit 0
                ;;
        esac
    done
}

move_file_dialog() {
    local file_to_move="$1"
    local full_path="$(pwd)/$file_to_move"
    local move_menu_index=0
    local move_menu_items=("OK - Move Here" "Cancel")
    local menu_lines="${#move_menu_items[@]}"
    local menu_title_lines=3
    local lines_printed=0
    
    if ! run_dir_selector "$file_to_move"; then
        printf "\nMove operation cancelled.\n"
        sleep 1
        return 0 
    fi
    
    if [[ ! -d "$DEST_DIR" ]]; then
        printf "\033c"
        printf "\nError: Destination directory '%s' does not exist or is invalid.\n" "$DEST_DIR"
        printf "Press any key to return to the file manager \n"
        stty -echo -icanon
        read -n 1 wait_key
        stty "$stty_orig"
        return 1
    fi

    while true; do
        printf "\033c"
        printf "--- Confirm Move ---\n\n"
        printf "File: %s\n" "$file_to_move"
        printf "From: %s\n" "$(pwd)"
        printf "To:   %s\n\n" "$DEST_DIR/"
        
        printf "Choose an action:\n"
        
        for i in "${!move_menu_items[@]}"; do
            local item="${move_menu_items[i]}"
            if [[ "$i" -eq "$move_menu_index" ]]; then
                printf "> \033[7m%s\033[0m\n" "$item"
            else
                printf "  %s\n" "$item"
            fi
        done
        
        lines_printed=$((menu_title_lines + menu_lines))
        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "\n[vol+] Up | [vol-] Down | [power] Select | [power+vol-] Quit\n"
        
        stty -echo -icanon
        read -n 1 move_choice
        stty "$stty_orig"

        case "$move_choice" in
        k)
            if [ "$move_menu_index" -gt 0 ]; then
                move_menu_index=$((move_menu_index - 1))
            fi
            ;;
        j)
            if [ "$move_menu_index" -lt "$(( menu_lines - 1 ))" ]; then
                move_menu_index=$((move_menu_index + 1))
            fi
            ;;
        l | $'\r' | $'\n')
            case "$move_menu_index" in
            0)
                if mv -- "$full_path" "$DEST_DIR/"; then
                    printf "\nFile moved successfully to: %s/\n" "$DEST_DIR"
                else
                    printf "\nFailed to move file.\n"
                fi
                sleep 1
                return 0 
                ;;
            1 | *)
                printf "\nMove operation cancelled.\n"
                sleep 1
                return 0 
                ;;
            esac
            ;;
        q)
            exit 0
            ;;
        esac
    done
}

delete_file_dir () {
    local _delete_menu_index=0
    local _delete_menu_items=()
    local full_path="$(pwd)/$selected_item"
    local parent_dir
    local menu_lines=0
    local lines_printed=0
    local menu_title_lines=3

    if [[ -d "$selected_item" ]]; then
        _delete_menu_items=("Delete this folder" "Cancel and go back")
    else
        parent_dir="$(dirname "$full_path")"
        _delete_menu_items=("Open/Flash this file" "Delete this file" "Delete containing folder: $(basename "$parent_dir")" "Move file to another folder" "Cancel and go back")
    fi

    menu_lines="${#_delete_menu_items[@]}"

    while true; do
        printf "\033c"

        if [[ -d "$selected_item" ]]; then
            printf "Folder selected for action: %s\n\n" "$selected_item/"
        else
            printf "_File selected for action: %s\n\n" "$selected_item"
        fi

        printf "Choose an action:\n"

        for i in "${!_delete_menu_items[@]}"; do
            local item="${_delete_menu_items[i]}"
            if [[ "$i" -eq "$_delete_menu_index" ]]; then
                printf "> \033[7m%s\033[0m\n" "$item"
            else
                printf "  %s\n" "$item"
            fi
        done

        lines_printed=$((menu_title_lines + menu_lines))

        for (( j = lines_printed; j < VIEW_HEIGHT; j++ )); do
            echo
        done

        printf "\n[vol+] Up | [vol-] Down | [power] Select | [power+vol-] Quit\n"

        stty -echo -icanon
        read -n 1 del_choice
        stty "$stty_orig"

        case "$del_choice" in
        k)
            if [ "$_delete_menu_index" -gt 0 ]; then
                _delete_menu_index=$((_delete_menu_index - 1))
            fi
            ;;
        j)
            if [ "$_delete_menu_index" -lt "$(( menu_lines - 1 ))" ]; then
                _delete_menu_index=$((_delete_menu_index + 1))
            fi
            ;;
        l | $'\r' | $'\n')
            if [[ -d "$selected_item" ]]; then
                case "$_delete_menu_index" in
                0)
                    if rm -rf -- "$selected_item"; then
                        printf "\nFolder deleted successfully.\n"
                    else
                        printf "\nFailed to delete the folder.\n"
                    fi
                    sleep 1
                    break
                    ;;
                1 | *)
                    break
                    ;;
                esac
            else
                case "$_delete_menu_index" in
                0)
                    if [[ "$selected_item" == *.img ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"
                    handle_img_flash "$full_path"

					elif [[ "$selected_item" == *.zip ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"

                    printf "\033c"
                    printf " Executing TWRP Install \n"
                    printf "Command: twrp install \"%s\"\n" "$full_path"

                    twrp install "$full_path"

                    printf "\n Press any key to return to the file manager \n"

                    stty -echo -icanon
                    read -n 1 wait_key
                    stty "$stty_orig"
                    elif [[ "$selected_item" == magisk*.apk ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"

                    printf "\033c"
                    printf " Executing TWRP Install \n"
                    printf "Command: twrp install \"%s\"\n" "$full_path"

                    twrp install "$full_path"

                    printf "\n Press any key to return to the file manager \n"

                    stty -echo -icanon
                    read -n 1 wait_key
                    stty "$stty_orig"
                    elif [[ "$selected_item" == *.txt ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"

                    printf "\033c"

                    exec /twres/bin/readtxt "$full_path"

                    printf "\n Press any key to return to the file manager \n"

                    stty -echo -icanon
                    read -n 1 wait_key
                    stty "$stty_orig"
                    elif [[ "$selected_item" == *.sh ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"

                    printf "\033c"
                    
                    chmod +x "$full_path"
                    bash "$full_path"

                    printf "\n Press any key to return to the file manager \n" 
                    
                    stty -echo -icanon
                    read -n 1 wait_key
                    stty "$stty_orig"
                    elif [[ "$selected_item" == *.ini ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"

                    printf "\033c"

                    exec /twres/bin/readtxt "$full_path"

                    printf "\n Press any key to return to the file manager \n"

                    stty -echo -icanon
                    read -n 1 wait_key
                    stty "$stty_orig"
                    elif [[ "$selected_item" == * ]] && [[ -f "$selected_item" ]]; then
                    full_path="$(pwd)/$selected_item"
                    printf "\n	Not flashable file	\n"
                    read -n 1 key
                    fi
                    ;;
                1)
                    if rm -f -- "$full_path"; then
                        printf "\nFile deleted successfully.\n"
                    else
                        printf "\nFailed to delete the file.\n"
                    fi
                    sleep 1
                    break
                    ;;
                2)
                    if rm -rf -- "$parent_dir"; then
                        printf "\nFolder deleted successfully.\n"
                    else
                        printf "\nFailed to delete the folder.\n"
                    fi
                    cd .. || exit 1
                    sleep 1
                    break
                    ;;
                3)
                    move_file_dialog "$selected_item"
                    break
                    ;;
                4 | *)
                    break
                    ;;
                esac
            fi
            ;;
			q)
			exit 0
            ;;
        esac
    done
}

file_manager_main() {
    _selected_index=0
    _page_start_index=0

    while true; do
        get_items
        draw_ui

        stty -echo -icanon
        read -n 1 key
        stty "$stty_orig"

        item_count="${#_items[@]}"

        case "$key" in
            j)
                if [ "$_selected_index" -lt "$((item_count - 1))" ]; then
                    _selected_index=$((_selected_index + 1))
                fi
                if [ "$_selected_index" -ge "$((_page_start_index + VIEW_HEIGHT))" ]; then
                    _page_start_index=$((_page_start_index + 1))
                fi
                ;;
            k)
                if [ "$_selected_index" -gt 0 ]; then
                    _selected_index=$((_selected_index - 1))
                fi
                if [ "$_selected_index" -lt "$_page_start_index" ]; then
                    _page_start_index=$((_page_start_index - 1))
                fi
                ;;

            ' ')
                next_start=$((_page_start_index + VIEW_HEIGHT))
                if [ "$next_start" -lt "$item_count" ]; then
                    _page_start_index="$next_start"
                    _selected_index=$((_page_start_index))
                fi
                ;;
            b)
                if [ "$_page_start_index" -gt 0 ]; then
                    _page_start_index=$((_page_start_index - VIEW_HEIGHT))
                    if [ "$_page_start_index" -lt 0 ]; then
                        _page_start_index=0
                    fi
                    _selected_index=$((_page_start_index))
                fi
                ;;

            h)
                cd .. || exit 1
                _selected_index=0
                _page_start_index=0
                ;;
            l | $'\r' | $'\n')
                selected_item_raw="${_items[_selected_index]}"
                selected_item="${selected_item_raw%/}" 
                printf "\033c"
                printf "Selected: %s/%s\n" "$(pwd)" "$selected_item_raw"
                
                if [[ "$selected_item" == "Back to main menu" ]]; then
                   twrp set backmenu 1
                    exit
                fi

				if [[ -d "$selected_item" ]]; then
					cd "$selected_item" || exit 1
					_selected_index=0
					_page_start_index=0
				else
					delete_file_dir "$selected_item"
				fi
                ;;
				q)
                exit 0
                ;;
        esac
    done
}

select_start_dir

file_manager_main
